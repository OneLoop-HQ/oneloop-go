// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/OneLoop-HQ/oneloop-go/core"
)

type CreateApiKeyRequest struct {
	Name              string                           `json:"name" url:"-"`
	WorkspaceId       string                           `json:"workspaceId" url:"-"`
	Prefix            *string                          `json:"prefix,omitempty" url:"-"`
	ExpiresAt         *int                             `json:"expiresAt,omitempty" url:"-"`
	TotalUsageAllowed *int                             `json:"totalUsageAllowed,omitempty" url:"-"`
	Scopes            []*CreateApiKeyRequestScopesItem `json:"scopes,omitempty" url:"-"`
	Enabled           bool                             `json:"enabled" url:"-"`
	CustomerId        string                           `json:"customerId" url:"-"`
}

type CreateWorkspaceRequest struct {
	Name string `json:"name" url:"-"`
}

type CreateWorkspaceScopeRequest struct {
	Name           string  `json:"name" url:"-"`
	Representation string  `json:"representation" url:"-"`
	Description    *string `json:"description,omitempty" url:"-"`
}

type EditApiKeyRequest struct {
	Name    *string        `json:"name,omitempty" url:"-"`
	Enabled *bool          `json:"enabled,omitempty" url:"-"`
	Scopes  []*ApiKeyScope `json:"scopes,omitempty" url:"-"`
}

type GenerateLinkTokenRequest struct {
	CustomerId  string `json:"customerId" url:"-"`
	WorkspaceId string `json:"workspaceId" url:"-"`
}

type RefillApiKeyRequest struct {
	Amount int `json:"amount" url:"-"`
}

type ApiKey struct {
	Id             string         `json:"id" url:"id"`
	Name           string         `json:"name" url:"name"`
	MaskedKey      string         `json:"maskedKey" url:"maskedKey"`
	Prefix         *string        `json:"prefix,omitempty" url:"prefix,omitempty"`
	ExpiresAt      *int           `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`
	TotalUsageLeft *int           `json:"totalUsageLeft,omitempty" url:"totalUsageLeft,omitempty"`
	LimitUsage     bool           `json:"limitUsage" url:"limitUsage"`
	Scopes         []*ApiKeyScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	Enabled        bool           `json:"enabled" url:"enabled"`
	CustomerId     *string        `json:"customerId,omitempty" url:"customerId,omitempty"`
	Deleted        bool           `json:"deleted" url:"deleted"`
	CreatedAt      string         `json:"createdAt" url:"createdAt"`
	UpdatedAt      string         `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKey(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKey) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiKeyScope struct {
	Id             *string `json:"id,omitempty" url:"id,omitempty"`
	Representation string  `json:"representation" url:"representation"`
	Create         bool    `json:"create" url:"create"`
	Read           bool    `json:"read" url:"read"`
	Update         bool    `json:"update" url:"update"`
	Del            bool    `json:"del" url:"del"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiKeyScope) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiKeyScope) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyScope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyScope(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyScope) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateApiKeyRequestScopesItem struct {
	Representation string `json:"representation" url:"representation"`
	Create         bool   `json:"create" url:"create"`
	Read           bool   `json:"read" url:"read"`
	Update         bool   `json:"update" url:"update"`
	Del            bool   `json:"del" url:"del"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateApiKeyRequestScopesItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateApiKeyRequestScopesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateApiKeyRequestScopesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateApiKeyRequestScopesItem(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateApiKeyRequestScopesItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateApiKeyResponse struct {
	ApiKey *CreateApiKeyResponseApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateApiKeyResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateApiKeyResponseApiKey struct {
	Id             string         `json:"id" url:"id"`
	Name           string         `json:"name" url:"name"`
	MaskedKey      string         `json:"maskedKey" url:"maskedKey"`
	Prefix         *string        `json:"prefix,omitempty" url:"prefix,omitempty"`
	ExpiresAt      *int           `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`
	TotalUsageLeft *int           `json:"totalUsageLeft,omitempty" url:"totalUsageLeft,omitempty"`
	LimitUsage     bool           `json:"limitUsage" url:"limitUsage"`
	Scopes         []*ApiKeyScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	Enabled        bool           `json:"enabled" url:"enabled"`
	CustomerId     *string        `json:"customerId,omitempty" url:"customerId,omitempty"`
	Deleted        bool           `json:"deleted" url:"deleted"`
	CreatedAt      string         `json:"createdAt" url:"createdAt"`
	UpdatedAt      string         `json:"updatedAt" url:"updatedAt"`
	Key            string         `json:"key" url:"key"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateApiKeyResponseApiKey) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateApiKeyResponseApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateApiKeyResponseApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateApiKeyResponseApiKey(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateApiKeyResponseApiKey) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace,omitempty" url:"workspace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateWorkspaceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateWorkspaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWorkspaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWorkspaceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWorkspaceResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateWorkspaceScopeResponse struct {
	Scope *WorkspaceScope `json:"scope,omitempty" url:"scope,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateWorkspaceScopeResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateWorkspaceScopeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWorkspaceScopeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWorkspaceScopeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWorkspaceScopeResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteApiKeyResponse struct {
	ApiKey *ApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteApiKeyResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EditApiKeyResponse struct {
	ApiKey *ApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EditApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EditApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EditApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EditApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EditApiKeyResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorResponse struct {
	Error *ErrorResponseError `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorResponseError struct {
	Code    float64 `json:"code" url:"code"`
	Message string  `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorResponseError) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorResponseError) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorResponseError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorResponseError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorResponseError) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type GenerateLinkTokenResponse struct {
	Token     string `json:"token" url:"token"`
	ExpiresAt int    `json:"expiresAt" url:"expiresAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateLinkTokenResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateLinkTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateLinkTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateLinkTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateLinkTokenResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type RefillApiKeyResponse struct {
	ApiKey *ApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RefillApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RefillApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RefillApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RefillApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RefillApiKeyResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveAllWorkspaceScopesResponse struct {
	Scopes []*WorkspaceScope `json:"scopes,omitempty" url:"scopes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RetrieveAllWorkspaceScopesResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveAllWorkspaceScopesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveAllWorkspaceScopesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveAllWorkspaceScopesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveAllWorkspaceScopesResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveApiKeyByIdResponse struct {
	ApiKey *ApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RetrieveApiKeyByIdResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveApiKeyByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveApiKeyByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveApiKeyByIdResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveApiKeyByIdResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveApiKeysResponse struct {
	ApiKeys []*ApiKey `json:"apiKeys,omitempty" url:"apiKeys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RetrieveApiKeysResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveApiKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveApiKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveApiKeysResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveApiKeysResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveWorkspaceByIdResponse struct {
	Workspace *Workspace `json:"workspace,omitempty" url:"workspace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RetrieveWorkspaceByIdResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveWorkspaceByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveWorkspaceByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveWorkspaceByIdResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveWorkspaceByIdResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveWorkspaceResponse struct {
	Workspaces []*Workspace `json:"workspaces,omitempty" url:"workspaces,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RetrieveWorkspaceResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveWorkspaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveWorkspaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveWorkspaceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveWorkspaceResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RotateApiKeyResponse struct {
	ApiKey *RotateApiKeyResponseApiKey `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RotateApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RotateApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RotateApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RotateApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateApiKeyResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RotateApiKeyResponseApiKey struct {
	Id             string         `json:"id" url:"id"`
	Name           string         `json:"name" url:"name"`
	MaskedKey      string         `json:"maskedKey" url:"maskedKey"`
	Prefix         *string        `json:"prefix,omitempty" url:"prefix,omitempty"`
	ExpiresAt      *int           `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`
	TotalUsageLeft *int           `json:"totalUsageLeft,omitempty" url:"totalUsageLeft,omitempty"`
	LimitUsage     bool           `json:"limitUsage" url:"limitUsage"`
	Scopes         []*ApiKeyScope `json:"scopes,omitempty" url:"scopes,omitempty"`
	Enabled        bool           `json:"enabled" url:"enabled"`
	CustomerId     *string        `json:"customerId,omitempty" url:"customerId,omitempty"`
	Deleted        bool           `json:"deleted" url:"deleted"`
	CreatedAt      string         `json:"createdAt" url:"createdAt"`
	UpdatedAt      string         `json:"updatedAt" url:"updatedAt"`
	Key            string         `json:"key" url:"key"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RotateApiKeyResponseApiKey) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RotateApiKeyResponseApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler RotateApiKeyResponseApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RotateApiKeyResponseApiKey(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateApiKeyResponseApiKey) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace,omitempty" url:"workspace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateWorkspaceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateWorkspaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateWorkspaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateWorkspaceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateWorkspaceResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidateLinkTokenResponse struct {
	Valid       bool   `json:"valid" url:"valid"`
	ExpiresAt   int    `json:"expiresAt" url:"expiresAt"`
	WorkspaceId string `json:"workspaceId" url:"workspaceId"`
	CustomerId  string `json:"customerId" url:"customerId"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *ValidateLinkTokenResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidateLinkTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateLinkTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateLinkTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateLinkTokenResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerifyApiKeyRequestRateLimitConfig struct {
	Id    string `json:"id" url:"id"`
	Limit int    `json:"limit" url:"limit"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VerifyApiKeyRequestRateLimitConfig) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerifyApiKeyRequestRateLimitConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler VerifyApiKeyRequestRateLimitConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerifyApiKeyRequestRateLimitConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerifyApiKeyRequestRateLimitConfig) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerifyApiKeyResponse struct {
	ExpiresAt       *int                           `json:"expiresAt,omitempty" url:"expiresAt,omitempty"`
	RequestedScopes []*ApiKeyScope                 `json:"requestedScopes,omitempty" url:"requestedScopes,omitempty"`
	Status          VerifyApiKeyResponseStatus     `json:"status" url:"status"`
	RateLimit       *VerifyApiKeyResponseRateLimit `json:"rateLimit,omitempty" url:"rateLimit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VerifyApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerifyApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VerifyApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerifyApiKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerifyApiKeyResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerifyApiKeyResponseRateLimit struct {
	Remaining int `json:"remaining" url:"remaining"`
	ResetAt   int `json:"resetAt" url:"resetAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VerifyApiKeyResponseRateLimit) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerifyApiKeyResponseRateLimit) UnmarshalJSON(data []byte) error {
	type unmarshaler VerifyApiKeyResponseRateLimit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerifyApiKeyResponseRateLimit(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerifyApiKeyResponseRateLimit) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerifyApiKeyResponseStatus string

const (
	VerifyApiKeyResponseStatusValid         VerifyApiKeyResponseStatus = "VALID"
	VerifyApiKeyResponseStatusExpired       VerifyApiKeyResponseStatus = "EXPIRED"
	VerifyApiKeyResponseStatusDisabled      VerifyApiKeyResponseStatus = "DISABLED"
	VerifyApiKeyResponseStatusDeleted       VerifyApiKeyResponseStatus = "DELETED"
	VerifyApiKeyResponseStatusRateLimited   VerifyApiKeyResponseStatus = "RATE_LIMITED"
	VerifyApiKeyResponseStatusUsageLimited  VerifyApiKeyResponseStatus = "USAGE_LIMITED"
	VerifyApiKeyResponseStatusInvalidScopes VerifyApiKeyResponseStatus = "INVALID_SCOPES"
	VerifyApiKeyResponseStatusInvalid       VerifyApiKeyResponseStatus = "INVALID"
)

func NewVerifyApiKeyResponseStatusFromString(s string) (VerifyApiKeyResponseStatus, error) {
	switch s {
	case "VALID":
		return VerifyApiKeyResponseStatusValid, nil
	case "EXPIRED":
		return VerifyApiKeyResponseStatusExpired, nil
	case "DISABLED":
		return VerifyApiKeyResponseStatusDisabled, nil
	case "DELETED":
		return VerifyApiKeyResponseStatusDeleted, nil
	case "RATE_LIMITED":
		return VerifyApiKeyResponseStatusRateLimited, nil
	case "USAGE_LIMITED":
		return VerifyApiKeyResponseStatusUsageLimited, nil
	case "INVALID_SCOPES":
		return VerifyApiKeyResponseStatusInvalidScopes, nil
	case "INVALID":
		return VerifyApiKeyResponseStatusInvalid, nil
	}
	var t VerifyApiKeyResponseStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VerifyApiKeyResponseStatus) Ptr() *VerifyApiKeyResponseStatus {
	return &v
}

type Workspace struct {
	Id                        string   `json:"id" url:"id"`
	Name                      string   `json:"name" url:"name"`
	TeamId                    string   `json:"teamId" url:"teamId"`
	DefaultKeyPrefix          *string  `json:"defaultKeyPrefix,omitempty" url:"defaultKeyPrefix,omitempty"`
	DefaultAllowedIPs         []string `json:"defaultAllowedIPs,omitempty" url:"defaultAllowedIPs,omitempty"`
	DefaultRateLimitPerSecond *int     `json:"defaultRateLimitPerSecond,omitempty" url:"defaultRateLimitPerSecond,omitempty"`
	DefaultExpiration         *int     `json:"defaultExpiration,omitempty" url:"defaultExpiration,omitempty"`
	CreatedAt                 string   `json:"createdAt" url:"createdAt"`
	UpdatedAt                 string   `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *Workspace) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Workspace) UnmarshalJSON(data []byte) error {
	type unmarshaler Workspace
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Workspace(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Workspace) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkspaceScope struct {
	Id             string  `json:"id" url:"id"`
	Name           string  `json:"name" url:"name"`
	Representation string  `json:"representation" url:"representation"`
	Description    *string `json:"description,omitempty" url:"description,omitempty"`
	CreatedAt      string  `json:"createdAt" url:"createdAt"`
	UpdatedAt      string  `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkspaceScope) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkspaceScope) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkspaceScope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkspaceScope(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspaceScope) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type UpdateWorkspaceRequest struct {
	DefaultKeyPrefix          *string  `json:"defaultKeyPrefix,omitempty" url:"-"`
	DefaultAllowedIPs         []string `json:"defaultAllowedIPs,omitempty" url:"-"`
	DefaultRateLimitPerSecond *int     `json:"defaultRateLimitPerSecond,omitempty" url:"-"`
	DefaultExpiration         *int     `json:"defaultExpiration,omitempty" url:"-"`
}

type VerifyApiKeyRequest struct {
	Key             string                              `json:"key" url:"-"`
	RequestedScopes []*ApiKeyScope                      `json:"requestedScopes,omitempty" url:"-"`
	RateLimitConfig *VerifyApiKeyRequestRateLimitConfig `json:"rateLimitConfig,omitempty" url:"-"`
}
